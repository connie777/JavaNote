设计模式六大原则：
	1）单一职责
	2）开闭原则 扩展开发，修改关闭
	3）依赖倒置 抽象不应该依赖细节，细节依赖于抽象。面向接口编程
	4）里式替换 子类型必须能够完全替代父类型
	5）合成复用 不要过多的依赖继承，尽量使用合成或聚合
	6）迪米特原则 


单例模式
	恶汉 线程安全，但是无法实现延迟加载
	public class HungrySingleton {
	    /** 私有化类构造器 */
	    private HungrySingleton() {}

	    /** 定义静态私有类对象 */
	    private static HungrySingleton instance = new HungrySingleton();

	    /** 提供公共静态的获取该私有类对象的方法 */
	    public static HungrySingleton getInstance() {
	        return instance;
	    }
	}

	public class HungrySingleton {
	    /** 私有化类构造器 */
	    private HungrySingleton() {}

	    /** 定义静态私有类对象 */
	    private static HungrySingleton instance ;

	    static{
	    	instance = new HungrySingleton();
	    }

	    /** 提供公共静态的获取该私有类对象的方法 */
	    public static HungrySingleton getInstance() {
	        return instance;
	    }
	}

	懒汉
	线程不安全的(可以在方法上加synchronize)
	public class Singleton {
	    /** 私有化类构造器 */
	    private Singleton() {}

	    /** 定义静态私有类对象 */
	    private static Singleton instance ;

	    /** 提供公共静态的获取该私有类对象的方法 */
	    public static Singleton getInstance() {
	    	if(instance==null){
	    		return new Singleton();
	    	}
	        
	    }
	}

	双重检查
	public class Singleton{
		private Singleton(){}

		private static volatile Singleton singleton;

		public static Singleton getInstance(){
			if(singleton==null){
				synchronize(Singleton.class){
					if(singleton==null){
						return new Singleton();
					}
				}
			}
		}

	}

	静态内部类
	class Singleton{
		private Singleton(){}

		private static class SingletonInstance{
			private static final Singleton INSTANCE=new Singleton();
		}
		public static Singleton getInstance(){
			return SingletonInstance.INSTANCE;
		}
	}

	枚举也可以实现
	enum Singleton{
		INSTANCE;

	}
	
简单工厂
	买ios还是Android，通过手机简单工厂去获取
	问题：类的创建依赖工厂，要拓展程序，必须对工厂类修改

工厂方法模式
	创建一个工厂接口和多个工厂实现类，需要增加新的产品时，只需要增加新的工厂实现

