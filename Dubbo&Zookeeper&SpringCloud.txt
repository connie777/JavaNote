1.Dubbo与Spring Cloud区别
	dubbo基于RPC（remote procedure call）远程过程调用
	cloud基于http rest api 调用
	cloud牺牲了服务调用的性能，但REST比RPC更为灵活，不存在代码级别的强依赖
	Dubbo的定位是一款RPC框架，cloud的目的是微服务架构下的一站式解决方案
	Dubbo实现服务集群和负载均衡：application name设置相同，dubbo:protocol port 配置不同端口，设置权重

2.ZooKeeper
	分布式协调服务框架

	分布式（distributed）与集群（cluster）：集群是将某个功能的服务器多部署几台；分布式是将某个服务拆分为多个服务分别部署在不同服务器上

	ZooKeeper保证了CP(数据一致性)，Eureka保证了AP(可用性)

	ZooKeeper数据存储结构为树形，使用znode作为数据节点
	节点类型：
		1）持久节点 一创建就存在，直到将其删除
		2）持久顺序节点	一个父节点可以为其子节点维护一个创建的先后顺序，子节点的名称后自动添加一个由10位数字组成的数字串，从0开始计数
		3）临时节点	生命周期与客户端会话绑定，会话消失则节点消失，只能做叶子节点
		4）临时顺序节点

	典型应用场景：
		1）选主 ：利用 临时节点、节点状态和watcher来实现选主的功能，临时节点主要用来选举，节点状态和watcher可以用来判断master的活性和重新选举
		2）分布式锁 ：zk在高并发的情况下保证节点创建的全局唯一性，实现互斥锁，实现分布式锁
		让多个客户端同时创建一个临时节点，创建成功的就说明获取到了锁。没有获取到锁的客户端创建一个watcher进行节点状态监听，如果这个互斥锁被释放了（可能获取锁的客户端宕机，或者客户端主动释放）可以调用回调函数重新获得锁
		3）命名服务：每个节点的全路径必定是唯一的
		4）集群管理和注册中心

3.SpringCloud
	1）Eureka 服务注册与发现的组件（注册中心），各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里
	2）Ribbon 负载均衡客户端  策略：随机、轮询、加权  服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台
	3）Hystrix 断路器  发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题
	4）zuul网关  统一从Zuul网关进入，由Zuul网关转发请求给对应的服务
	5）config server  可以将配置文件放在git服务器上，config server读取git，config client 读取 config server

4.springboot中的常用注解
	1）@Configuration @Bean
		带有@Configuration的注解类表示这个类可以使用Spring IOC容器作为bean定义的来源。
		@Bean注解告诉Spring，一个带有@Bean的注解方法将返回一个对象，该对象应该被注册为在Spring应用程序上下文中的bean。方法名称为bean的id

	2）@ControllerAdvice 标注类为异常处理类
		@ExceptionHandle（value=Exception.class)标注的方法处理特定的异常
		例：		@ControllerAdvice
				//异常处理
				public class BaseExceptionHandler {
				    @ExceptionHandler(value = Exception.class)
				    @ResponseBody
				    public Result error(Exception e){
				        e.printStackTrace();
				        return new Result(false, StatusCode.ERROR,e.getMessage());
				    }
				}

	3) @CrossOrigin  跨域

	4）赋值注解
		@ConfigurationProperties 适合配置文件与javabean批量映射
		@Value 适合单个赋值


服务发现——Netflix Eureka
服务调用——Netflix Feign
熔断器——Netflix Hystrix
服务网关——Netflix Zuul
分布式配置——Spring Cloud Config
消息总线—— Spring Cloud Bus

雪崩效应：
	A作为服务提供者，B为A的服务消费者，C和D是B的服务消费者。A不可用引起B的不可用，并将不可用像滚雪球一样放大到C和D，从而形成雪崩效应。
	Hystrix实现熔断器，避免雪崩效应

feign默认具有负载均衡功能，同一生产者服务的集群，只需配置spring.application.name相同，port不同即可

feign本身支持hystrix,只需在配置文件中开启：feign.hystrix.enabled=true
	编写FeignClient 的实现类，并在注解@FeignClient 添加属性FallBack
	@FeignClient(value = "tensquare-base",fallback = BaseClientImpl.class)
	public interface BaseClient {
	    @RequestMapping(value = "/label/{labelId}",method = RequestMethod.GET)
	    public Result findById(@PathVariable("labelId") String labelId);
	}

zuul网关
	可以通过网关来访问微服务，不用记住每个微服务的域名，端口，路径
	通过路径映射到对应的微服务
	启动类加注解@EnableZuulProxy，网关微服务也需要注册到eureka
	配置文件添加映射配置
		zuul:
		  routes:
		    tensquare-gathering:    #活动
		      path: /gathering/**   #配置请求URL的请求规则
		      serviceId: tensquare-gathering  #指定Eureka注册中心中的服务id

经过网关后，request请求的header头信息会丢失

可以在zuul filter 转发请求头信息
简单的鉴权

Spring Cloud Config
	把所有服务的配置文件都放在一个代码托管平台上（gitlab，gitee）
	通过该服务去读取对应微服务所需的配置文件
	可以将大部分配置文件放到云端，方便后期维护

Spring Cloud Bus
	不重启微服务的情况下，更新配置文件，立刻生效
	步骤：
		修改配置文件后，往配置微服务发送一个post请求，例：http://127.0.0.1:12000/actuator/bus-refresh 
		最后的bus-refresh 可以在配置微服务中配置：
			management: #暴露触发消息总线的地址
			  endpoints:
			    web:
			      exposure:
			        include: bus-fresh

	原理：修改配置文件后，发送指定post请求给config server，config server 往rabbitmq中发送消息，config client 接收消息，重新从config server读取配置信息

	config client 需要引入bus、rabbitmq、springboot-actuator依赖，config server只需前两个

	自定义配置的更新：在需要读取配置信息的java bean 上添加注解：@RefreshScope