1.Dubbo与Spring Cloud区别
	dubbo基于RPC（remote procedure call）远程过程调用
	cloud基于http rest api 调用
	cloud牺牲了服务调用的性能，但REST比RPC更为灵活，不存在代码级别的强依赖
	Dubbo的定位是一款RPC框架，cloud的目的是微服务架构下的一站式解决方案
	Dubbo实现服务集群和负载均衡：application name设置相同，dubbo:protocol port 配置不同端口，设置权重

2.ZooKeeper
	分布式协调服务框架

	分布式（distributed）与集群（cluster）：集群是将某个功能的服务器多部署几台；分布式是将某个服务拆分为多个服务分别部署在不同服务器上

	ZooKeeper保证了CP(数据一致性)，Eureka保证了AP(可用性)

	ZooKeeper数据存储结构为树形，使用znode作为数据节点
	节点类型：
		1）持久节点 一创建就存在，直到将其删除
		2）持久顺序节点	一个父节点可以为其子节点维护一个创建的先后顺序，子节点的名称后自动添加一个由10位数字组成的数字串，从0开始计数
		3）临时节点	生命周期与客户端会话绑定，会话消失则节点消失，只能做叶子节点
		4）临时顺序节点

	典型应用场景：
		1）选主 ：利用 临时节点、节点状态和watcher来实现选主的功能，临时节点主要用来选举，节点状态和watcher可以用来判断master的活性和重新选举
		2）分布式锁 ：zk在高并发的情况下保证节点创建的全局唯一性，实现互斥锁，实现分布式锁
		让多个客户端同时创建一个临时节点，创建成功的就说明获取到了锁。没有获取到锁的客户端创建一个watcher进行节点状态监听，如果这个互斥锁被释放了（可能获取锁的客户端宕机，或者客户端主动释放）可以调用回调函数重新获得锁
		3）命名服务：每个节点的全路径必定是唯一的
		4）集群管理和注册中心

3.SpringCloud
	1）Eureka 服务注册与发现的组件（注册中心），各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里
	2）Ribbon 负载均衡客户端  策略：随机、轮询、加权  服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台
	3）Hystrix 断路器  发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题
	4）zuul网关  统一从Zuul网关进入，由Zuul网关转发请求给对应的服务
	5）config server  可以将配置文件放在git服务器上，config server读取git，config client 读取 config server
