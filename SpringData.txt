SpringDataJpa

单表查询用jpql或方法命名
多表用sql
dao:
	public interface LabelDao extends JpaRepository<Label,String>, JpaSpecificationExecutor<Label> {}

jpql
service:
	@Service
	@Transactional
	public class LabelService {
	    @Autowired
	    private LabelDao labelDao;

	    @Autowired
	    private IdWorker idWorker;

	    public List<Label> findAll(){
	        return labelDao.findAll();
	    }

	    public Label findById(String id){
	        return labelDao.findById(id).get(); //需要注意
	    }

	    public void save(Label label){
	        label.setId(idWorker.nextId()+"");
	        labelDao.save(label);
	    }

	    public void update(Label label){
	        labelDao.save(label);
	    }

	    public void deleteById(String id){
	        labelDao.deleteById(id);
	    }

	    public List<Label> findSearch(Label label) {
	    	//条件查询
	        return labelDao.findAll(new Specification<Label>() {
	            /**
	             *
	             * @param root 根对象，获取列名
	             * @param query 封装的都是查询关键字，如group by order by  一般不用
	             * @param cb 封装条件对象,如果直接返回null，表示不需要任何条件
	             * @return
	             */
	            @Override
	            public Predicate toPredicate(Root<Label> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
	                List<Predicate> list=new ArrayList<>();
	                if(label.getLabelname()!=null&&!"".equals(label.getLabelname())) {
	                    Predicate predicate=cb.like(root.get("labelname").as(String.class), "%" + label.getLabelname() + "%");//条件一：labelname like %?%
	                    list.add(predicate);
	                }
	                if(label.getState()!=null&&!"".equals(label.getState())){
	                	//条件二：state=？
	                    Predicate predicate=cb.equal(root.get("state").as(String.class), label.getState());
	                    list.add(predicate);
	                }
	                Predicate[] parr=new Predicate[list.size()];
	                parr=list.toArray(parr);
	                return cb.and(parr);//条件间的关系为AND
	            }
	        });
	    }

	    public Page<Label> pageQuery(Label label, int page, int size) {
	        //封装分页对象  Pageable的页码从0开始，页面的第一页其实是pageable的第0页
	        Pageable pageable = PageRequest.of(page-1,size);
	        return labelDao.findAll(new Specification<Label>() {
	            @Override
	            public Predicate toPredicate(Root<Label> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder cb) {
	                List<Predicate> list=new ArrayList<>();
	                if(label.getLabelname()!=null&&!"".equals(label.getLabelname())) {
	                    Predicate predicate=cb.like(root.get("labelname").as(String.class), "%" + label.getLabelname() + "%");
	                    list.add(predicate);
	                }
	                if(label.getState()!=null&&!"".equals(label.getState())){
	                    Predicate predicate=cb.equal(root.get("state").as(String.class), label.getState());
	                    list.add(predicate);
	                }
	                Predicate[] parr=new Predicate[list.size()];
	                parr=list.toArray(parr);
	                return cb.and(parr);
	            }
	        },pageable);
	    }

方法命名:
	public interface RecruitDao extends JpaRepository<Recruit,String>,JpaSpecificationExecutor<Recruit>{

    //推荐职位
    public List<Recruit> findTop6ByStateOrderByCreatetimeDesc(String state);
    //where state = ? order by createtime desc limit 0,6

    //最新职位
	public List<Recruit> findTop6ByStateNotOrderByCreatetimeDesc(String state);
	//where state != ? order by createtime desc limit 0,6
}

sql：
	@Query(value = "SELECT * FROM tb_problem,tb_pl " +
            "WHERE id=problemid AND labelid=? " +
            "order by replytime desc ",nativeQuery = true)
	public Page<Problem> newlist(String labelid, Pageable pageable);

    @Modifying  //通知jpa这是一个update或者delete操作，jpql不支持insert操作
    @Query("update Account set name=:name, money=:money,version=:version+1 where id=:id and version=:version")
    int updateAccountByVersion(@Param("id") int id,@Param("name") String name, @Param("money") double money,@Param("version") int version);

    数据库中与null值做算术运算还是null值


SpringDataRedis

    docker run -di --name=tensquare_redis -p 6379:6379 redis

    public Article findById(String id) {
	    //先从缓存从查询当前对象
        Article article= (Article) redisTemplate.opsForValue().get("article_"+id);
        //如果缓存不存在
        if(article==null){
            article=articleDao.findById(id).get();
            redisTemplate.opsForValue().set("article_"+id,article);

        }
		return article;
	}

SpringDataMongoDB

	DAO:
		public interface SpitDao extends MongoRepository<Spit,String> {

		    public Page<Spit> findByParentid(String parentid, Pageable pageable);
		}