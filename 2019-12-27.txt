2019-12-27 晴

异常处理

java中非正常情况分为两种：异常（Exception）和错误（Error），他们都继承Throwable父类

异常处理语法结构中只有try块是必须的，catch块和finally块至少出现其一。

除非在try块、catch块中调用了退出虚拟机的方法，否则异常处理的finally块总会被执行

一旦在finally块中使用了return或throw语句，将会导致try块、catch块中的return、throw语句失效

java的异常被分为两大类：Checked异常和Runtime异常（运行时异常）

checked异常必须显示处理，否则无法通过编译

throws声明抛出只能在方法签名中使用，throws可以声明抛出多个异常类，用逗号隔开

自定义异常类，继承Exception或RuntimeException


多线程
Thread.currentThread():返回当前正在执行的线程对象

通过FutureTask创建多线程
		FutureTask<Integer> task=new FutureTask<Integer>(new Callable<Integer>() {

			@Override
			public Integer call() throws Exception {
				int i=0;
				for(;i<100;i++) {
					System.out.println(Thread.currentThread().getName()+" "+i);
				}
				return i;
			}
		});
		for (int i = 0; i < 100; i++) {
			System.out.println(Thread.currentThread().getName()+" "+i);
			if(i==20) {
				new Thread(task,"有返回值的线程").start();
			}
		}
		try {
			//获取返回值
			System.out.println(task.get());
		} catch (InterruptedException | ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

线程的状态
New Runnable Running Blocked Deadd

2019-12-30 晴
线程的join方法

在主线程中调用某个线程的join()方法时，会使得主线程被阻塞，直到调用join方法的线程执行完毕
		public class MyThread extends Thread {
			public MyThread(String name) {
				super(name);
			}
			@Override
			public void run() {
				for (int i = 0; i < 100; i++) {
					System.out.println(this.getName()+" "+i);
				}
			}
			public static void main(String[] args) throws InterruptedException {
				for(int i=0;i<100;i++) {
					if(i==20) {
						MyThread t=new MyThread("并行线程");
						//并行线程启动，并使主线程阻塞，直到并行线程执行完毕
						t.start();
						t.join();
					}
					//主线程输出
					System.out.println(Thread.currentThread().getName()+"    "+i);
				}
			}
		}

后台线程（守护线程）
JVM的垃圾回收线程就是典型的后台线程
特征：如果所有的前台线程都死亡，后台线程会自动死亡
调用Thread的setDaemon（true）方法可将指定线程设置成后台线程，需要在调用start()方法之前调用

线程睡眠 sleep
static void sleep(long millis):让当前正在执行的线程暂停millis毫秒，并进入阻塞状态

yield()方法:让当前线程暂停一下，不会阻塞线程，只是将该线程转入就绪状态

sleep()方法与yield()方法区别
yield()方法暂停当前线程后，会给优先级相同或更高的线程执行机会；sleep()方法不会理会优先级
yield()方法只是强制当前线程进入就绪状态；sleep()方法会将线程转入阻塞状态，直到经过阻塞时间才会转入就绪状态；
sleep()声明抛出InterruptedException异常

改变线程优先级
setPriority(int newPriority)  1~10  
MAX_PRORITY:10  MIN_PRIORITY:1    NORM_PRIORITY:5  推荐使用
getPriority()

线程安全问题
synchronized
wait()方法会释放锁对象
sleep()、yield()不会释放


