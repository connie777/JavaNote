1.AOP
	AOP,一般称为面向切面，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块。这个模块被命名为’切面‘（ASPECT),减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理。

	AOP实现的关键在于代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ;动态代理则以Spring AOP为代表。
	（1）Aspect J 是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强，他会在编译阶段将Aspect（切面）织入到Java字节码中，运行的时候就是增强之后的AOP对象。
	（2）Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不回去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。
		Spring AOP中的动态代理主要有JDK动态代理和CGLIB代理
		1）JDK动态代理只提供接口的代理，不支持类的代理。
		2）CGLIB是一个代码生成的类库，可以在运行时动态地生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码。CGLIB通过继承的方式做的动态代理因此如果某个类被标记为final，那将无法使用CGLIB。
	（3）静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理

2.IOC
	（1）IOC控制反转，是指创建对象的控制权的转移，由程序员转移到了Spring容器中，由容器创建实例和管理各个实例之间的依赖关系，对象与对象之间松散耦合，也利于功能复用。DI依赖注入，应用程序在运行时依赖IOC容器来动态注入对象需要的外部资源。
	（2）使用java的反射机制，根据配置文件在运行时动态的创建对象和管理对象。
	（3）IOC注入方式：构造器注入、setter方法注入、注解注入

3.BeanFactory与ApplicationContext区别
	是Spring的两大核心接口，都可当做Spring的容器，ApplicationContext是BeanFactory的子接口。
	ApplicationContext比BeanFactory拥有更完整的框架功能：支持国际化等。
	BeanFactory采用延迟加载来注入bean，不利于检查属性的注入；ApplicationContext在容器启动时一次性创建所有bean，占用内存空间，bean配置较多时启动慢。

4.Spring Bean生命周期
	（1）实例化bean 
		容器调用createBean进行实例化
	（2）设置对象属性（依赖注入）
	（3）处理Aware接口
		Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean
	（4）BeanPostProcessor
		如果想对Bean进行一些自定义的处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。
	（5）InitializingBean与init-method
		如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法
	（6）如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；
	（7）DisposableBean
		当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；
	（8）destroy-method

5.bean作用域
	（1）singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。
	（2）prototype：为每一个bean请求提供一个实例。
	（3）request
	（4）session
	（5）global-session

6.@Autowired与@Resource区别
	@Autowired默认是按照类型装配注入的；@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。

7.Spring用到的设计模式
	（1）工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；
	（2）单例模式：Bean默认为单例模式。
	（3）代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；
	（4）模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate

8.spring的事务传播行为
	（1） PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。
	（2） PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。
	（3）PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。
	（4）PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。
	（5）PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
	（6） PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。
	（7）PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按REQUIRED属性执行。

9.Spring中的事务隔离级别：
	（1）ISOLATION_DEFAULT
	（2）ISOLATION_READ_UNCOMMITTED
	（3）ISOLATION_READ_COMMITTED
	（4）ISOLATION_REPEATABLE_READ
	（5）ISOLATION_SERIALIZABLE

10.SpringMVC流程
	（1）用户发送请求至前端控制器DispatcherServlet；
	（2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；
	（3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；
	（4）DispatcherServlet 调用 HandlerAdapter处理器适配器；
	（5）HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)；
	（6）Handler执行完成返回ModelAndView；
	（7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；
	（8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；
	（9）ViewResolver解析后返回具体View；
	（10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）
	（11）DispatcherServlet响应用户。